plugins {
    id "java-gradle-plugin"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "com.gradle.plugin-publish" version "0.21.0"
    id 'org.ajoberstar.reckon' version "0.16.1"
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
    id "org.sonarqube" version "3.4.0.2513"
    id "be.vbgn.ci-detect" version "0.5.0"
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

group 'eu.xenit.gradle'

sourceCompatibility = 1.8

configurations {
    packaged
    compileOnly.extendsFrom(packaged)
    testImplementation.extendsFrom(packaged)
    integrationTestImplementation.extendsFrom testImplementation
}

sourceSets {
    main {
        java {
            runtimeClasspath += configurations.packaged
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.java.sourceDirectories
        testResourceDirs += sourceSets.integrationTest.resources.srcDirs
    }
}


gradlePlugin {
    plugins {
        dockerAlfresco {
            id = "eu.xenit.docker-alfresco"
            implementationClass = "eu.xenit.gradle.docker.alfresco.DockerAlfrescoPlugin"
        }
        dockerConfig {
            id = "eu.xenit.docker-config"
            implementationClass = "eu.xenit.gradle.docker.config.DockerConfigPlugin"
        }
        docker {
            id = "eu.xenit.docker"
            implementationClass = "eu.xenit.gradle.docker.core.DockerPlugin"
        }
        dockerCompose {
            id = "eu.xenit.docker-compose"
            implementationClass = "eu.xenit.gradle.docker.compose.DockerComposePlugin"
        }
        dockerComposeAuto {
            id = "eu.xenit.docker-compose.auto"
            implementationClass = "eu.xenit.gradle.docker.compose.DockerComposeAutoPlugin"
        }
    }
    testSourceSets(sourceSets.test, sourceSets.integrationTest)
}

pluginBundle {
    vcsUrl = "https://github.com/xenit-eu/alfresco-docker-gradle-plugin"
    website = vcsUrl
    description = "A gradle plugin to create Alfresco docker images with extensions"
    tags = ["alfresco", "docker"]
    plugins {
        dockerAlfresco {
            displayName = "Alfresco docker plugin"
        }

        dockerConfig {
            displayName = "Docker configuration plugin"
        }

        docker {
            displayName = "Docker plugin"
        }

        dockerCompose {
            displayName = "docker-compose plugin"
        }

        dockerComposeAuto {
            displayName = "docker-compose plugin: automatic configuration for all projects"
        }
    }

    mavenCoordinates {
        groupId = "eu.xenit.gradle"
        artifactId = "alfresco-docker-plugin"
    }
}

reckon {
    scopeFromProp()
    snapshotFromProp()
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        url "https://artifacts.alfresco.com/nexus/content/groups/public/"
    }
}


dependencies {
    packaged 'org.alfresco:alfresco-mmt:6.0'
    packaged group: 'commons-io', name: 'commons-io', version: '2.11.0'
    packaged('org.eclipse.jgit:org.eclipse.jgit:6.2.0.202206071550-r') {
        exclude group: 'org.slf4j'
    }

    implementation 'com.bmuschko:gradle-docker-plugin:7.4.0'
    implementation 'com.avast.gradle:gradle-docker-compose-plugin:0.14.3'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    testImplementation gradleTestKit()
    testImplementation "org.mockito:mockito-core:4.+"
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'

    integrationTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
}


task shadowJar(type: ShadowJar) {
    from sourceSets.main.output
    configurations = [project.configurations.packaged]
    archiveClassifier = "shadow"
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude "META-INF/*.RSA"
}

task configureShadowJar(type: ConfigureShadowRelocation) {
    target = shadowJar
    prefix = "eu.xenit.gradle.docker.internal.shadow"
}

shadowJar.dependsOn(configureShadowJar)

jar {
    from zipTree(shadowJar.outputs.files.singleFile)
    dependsOn(shadowJar)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

pluginUnderTestMetadata {
    pluginClasspath.from(configurations.packaged)
}

import org.gradle.util.GradleVersion

task integrationTest(type: Test, group: "verification") {
    useJUnit()
    /**
     * integrationTestScope selects which Gradle versions get tested against
     * A scope of 0 only tests the earliest and latest version and gives quick feedback
     * A scope of 1 additionally tests the earliest and latest version of every major release
     * A scope of 2 additionally tests the latest version of every minor release
     * A scope of 3 tests all patch releases"
     */
    systemProperty "eu.xenit.gradle.integration.scope", project.findProperty("integrationTestScope") ?: (ci.isCi()?"2":"0")
    systemProperty "eu.xenit.gradle.integration.slice.index", project.findProperty("integrationTestSlice.index") ?: "0"
    systemProperty "eu.xenit.gradle.integration.slice.total", project.findProperty("integrationTestSlice.total") ?: "1"
    doFirst {
        if (gradle.startParameter.offline) {
            systemProperty "eu.xenit.gradle.integration.useGradleVersion", GradleVersion.current().version
        }
    }
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter(test)
}

jacocoTestReport {
    dependsOn(test, integrationTest)
    executionData(test, integrationTest)
    reports {
        xml.enabled = true
    }
}

sonarqube {
    properties {
        properties["sonar.tests"] += sourceSets.integrationTest.java.srcDirs
        if (ci.isPullRequest()) {
            properties["sonar.pullrequest.key"] = ci.pullRequest
            properties["sonar.pullrequest.branch"] = ci.branch
            properties["sonar.pullrequest.base"] = ci.pullRequestTargetBranch
        } else {
            properties["sonar.branch.name"] = ci.reference
        }
    }
}

check.dependsOn(integrationTest)
reckonTagCreate.dependsOn(check)
tasks.sonarqube.dependsOn(check, jacocoTestReport)

